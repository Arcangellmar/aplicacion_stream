<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
	<link rel="preconnect" href="https://fonts.googleapis.com">
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
	<link href="https://fonts.googleapis.com/css2?family=Poppins&display=swap" rel="stylesheet">
    <title>Hello, world!</title>
	<style>
		*{
			font-family: 'Poppins', sans-serif;
		}
	</style>
  </head>
  <body>
	<div class="container-fluid">
		<div class="row align-items-center min-vh-100" style="background: url('https://img-prod-cms-rt-microsoft-com.akamaized.net/cms/api/am/imageFileData/RWHCVL?ver=1c70&q=90&m=2&h=2147483647&w=2147483647&b=%23FFFFFFFF&aim=true'); background-repeat: no-repeat; background-position: center; background-size: cover;">
			<div class="col text-center px-0">
				<nav class="navbar navbar-expand-lg navbar-light bg-light fixed-top">
					<div class="container">
						<% if (login) {%>
							<div class="d-inline">
								<img class="d-inline" src="/iamgen.jpeg" alt="" width="45px" height="45px">
								<h3 class="d-inline">Bienvenido <%=name%></h3>
							</div>
							<a href="logout">Salir</a>
						<% } else{ %>
							<div class="d-inline">
								<img class="d-inline" src="/iamgen.jpeg" alt="" width="45px" height="45px">
								<h3 class="d-inline">Meet Together</h3>
							</div>
							<div>
								<a class="btn btn-primary btn-lg" onclick="procesoLogin()">Ingresar</a>
								<a class="btn btn-primary btn-lg" onclick="procesoRegistro()">Registro</a>
							</div>
						<% } %>
					</div>
				</nav>
				<div class="container">
					<div class="row justify-content-center">
						<div class="col-9">
							<h2 class="fw-bold" style="color:chartreuse; font-size: 48px">Te damos la bienvenida a Meet Together</h2>
							<p class="fw-bold" style="color:white; font-size: 28px">Plataforma de videollamadas que permite al usuario realizar reuniones online con otro usuario o grupo de usuarios en cualquier parte del mundo. La plataforma tiene como punto diferenciador que es customizable, es decir, las personas dentro de la llamada pueden darle una temática según sus gustos, esto incluye cambiar el fondo de pantalla de la llamada, tener iconos en cada recuadro de los participantes entre otros añadidos.</p>
							<% if (login) {%>
								<a class="btn btn-primary btn-lg mx-3" style="font-size: 32px;" onclick="procesoEmitir()">Iniciar Videollamada</a>
								<a class="btn btn-primary btn-lg mx-3" style="font-size: 32px;" onclick="procesoLlamada()">Unirse a llamada</a>
							<% } else{ %>
								<a class="btn btn-primary btn-lg p-3" style="font-size: 32px;" onclick="necesitasLoguearse()">Iniciar Videollamada</a>
							<% } %>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
	<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

	<script>

        function procesoEmitir(){
			let timerInterval; 
            Swal.fire({
            title: 'Iniciando Proceso',
            html: 'Tiempo estimado <b></b>.',
            timer: Math.round((Math.random() * (6 - 1) + 1) * 1000),
            timerProgressBar: true,
            didOpen: () => {
                Swal.showLoading()
                const b = Swal.getHtmlContainer().querySelector('b')
                timerInterval = setInterval(() => {
                b.textContent = Swal.getTimerLeft()
                }, 100)
            },
            willClose: () => {
                clearInterval(timerInterval)
            }
            }).then((result) => {
                if (result.dismiss === Swal.DismissReason.backdrop) {
                    Swal.fire('Proceso cancelado');
                }
                else{
					window.location.href = "/emitir";
                }
            });
		}

        function procesoLlamada(){
			let timerInterval; 
            Swal.fire({
            title: 'Iniciando Proceso',
            html: 'Tiempo estimado <b></b>.',
            timer: Math.round((Math.random() * (6 - 1) + 1) * 1000),
            timerProgressBar: true,
            didOpen: () => {
                Swal.showLoading()
                const b = Swal.getHtmlContainer().querySelector('b')
                timerInterval = setInterval(() => {
                b.textContent = Swal.getTimerLeft()
                }, 100)
            },
            willClose: () => {
                clearInterval(timerInterval)
            }
            }).then((result) => {
                if (result.dismiss === Swal.DismissReason.backdrop) {
                    Swal.fire('Proceso cancelado');
                }
                else{
					unirseLlamada();
                }
            });
		}

		function procesoLogin(){
			let timerInterval; 
            Swal.fire({
            title: 'Iniciando Proceso',
            html: 'Tiempo estimado <b></b>.',
            timer: Math.round((Math.random() * (6 - 1) + 1) * 1000),
            timerProgressBar: true,
            didOpen: () => {
                Swal.showLoading()
                const b = Swal.getHtmlContainer().querySelector('b')
                timerInterval = setInterval(() => {
                b.textContent = Swal.getTimerLeft()
                }, 100)
            },
            willClose: () => {
                clearInterval(timerInterval)
            }
            }).then((result) => {
                if (result.dismiss === Swal.DismissReason.backdrop) {
                    Swal.fire('Proceso cancelado');
                }
                else{
					window.location.href = "/login";
                }
            });
		}

		function procesoRegistro(){
			let timerInterval; 
            Swal.fire({
            title: 'Iniciando Proceso',
            html: 'Tiempo estimado <b></b>.',
            timer: Math.round((Math.random() * (6 - 1) + 1) * 1000),
            timerProgressBar: true,
            didOpen: () => {
                Swal.showLoading()
                const b = Swal.getHtmlContainer().querySelector('b')
                timerInterval = setInterval(() => {
                b.textContent = Swal.getTimerLeft()
                }, 100)
            },
            willClose: () => {
                clearInterval(timerInterval)
            }
            }).then((result) => {
                if (result.dismiss === Swal.DismissReason.backdrop) {
                    Swal.fire('Proceso cancelado');
                }
                else{
					window.location.href = "/registro";
                }
            });
		}

		function necesitasLoguearse(){
			let timerInterval; 
            Swal.fire({
            title: 'Iniciando Proceso',
            html: 'Tiempo estimado <b></b>.',
            timer: Math.round((Math.random() * (6 - 1) + 1) * 1000),
            timerProgressBar: true,
            didOpen: () => {
                Swal.showLoading()
                const b = Swal.getHtmlContainer().querySelector('b')
                timerInterval = setInterval(() => {
                b.textContent = Swal.getTimerLeft()
                }, 100)
            },
            willClose: () => {
                clearInterval(timerInterval)
            }
            }).then((result) => {
                if (result.dismiss === Swal.DismissReason.backdrop) {
                    Swal.fire('Proceso cancelado');
                }
                else{
					Swal.fire({
						title: 'Inicie sesión para realizar videollamadas',
						confirmButtonText: 'Iniciar Sesión',

					}).then((result) => {
						if (result.isConfirmed) {
						  window.location.href = "/login";
						}
					  })
                }
            });
		}

		function unirseLlamada(){
			let timerInterval; 
            Swal.fire({
            title: 'Iniciando Camara',
            html: 'Tiempo estimado <b></b>.',
            timer: Math.random() * (6 - 1) + 1,
            timerProgressBar: true,
            didOpen: () => {
                Swal.showLoading()
                const b = Swal.getHtmlContainer().querySelector('b')
                timerInterval = setInterval(() => {
                b.textContent = Swal.getTimerLeft()
                }, 100)
            },
            willClose: () => {
                clearInterval(timerInterval)
            }
            }).then((result) => {
                if (result.dismiss === Swal.DismissReason.backdrop) {
                    Swal.fire('Proceso cancelado');
                }
                else{
					let codigoSala;

					Swal.fire({
						title: 'Código de sala',
						input: 'text',
						inputAttributes: {
						autocapitalize: 'off'
						},
						showCancelButton: true,
						confirmButtonText: 'Unirse',
						cancelButtonText: "Cancelar",
						showLoaderOnConfirm: true,
						allowOutsideClick: () => !Swal.isLoading(),
						preConfirm: (code) => {
							codigoSala = code;
							return true;
						},
					}).then((result) => {
						if (result.isConfirmed) {
							window.location.href = "/emitir/" + codigoSala;
						}
					});
                }
            });
		}
	</script>
  </body>
</html>